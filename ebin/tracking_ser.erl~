%%%-------------------------------------------------------------------
%%% %%
%%% Author: Hanieh Vahabi
%%% Version: 0.2
%%% 2011.11.09
%%% @copyright (C) 2011, 
%%% @doc
%%% @Changes : OTP behavior implemented by Yohanes
%%% @end
%%%-------------------------------------------------------------------
-module(tracking_ser).

-behaviour(gen_server).

%% API
-export([start_link/0,stop/0,set_tracker/2,get_data/0,bin_to_hex_formated/1,fetch_data/2,fetch/2,parse_bin_peer/1]).

%% gen_server callbacks
-export([init/1, handle_call/3, handle_cast/2, handle_info/2,
	 terminate/2, code_change/3]).

-define(SERVER, ?MODULE). 

%%%===================================================================
%%% API
%%%===================================================================

%%--------------------------------------------------------------------
%% @doc
%% Starts the server
%%
%% @spec start_link() -> {ok, Pid} | ignore | {error, Error}
%% @end
%%--------------------------------------------------------------------
start_link() ->
    gen_server:start_link({local, ?SERVER}, ?MODULE, [], []).

stop()->
	gen_server:cast(?MODULE,{req,stop}).

%% set tracker address and needed client Information
set_tracker(Tracker,{Info_hash,Peer_id,Port,Uploaded,Downloaded,Left})->
	Info_hash_formated=bin_to_hex_formated(Info_hash),
	gen_server:call(?MODULE,{set_tracker,Tracker,Info_hash_formated,Peer_id,Port,Uploaded,Downloaded,Left},infinity).
get_data()->
	gen_server:call(?MODULE,{get_data,self()}).

%%%===================================================================
%%% gen_server callbacks
%%%===================================================================

%%--------------------------------------------------------------------
%% @private
%% @doc
%% Initializes the server
%%
%% @spec init(Args) -> {ok, State} |
%%                     {ok, State, Timeout} |
%%                     ignore |
%%                     {stop, Reason}
%% @end
%%--------------------------------------------------------------------
init([]) ->
    {ok, {undefined,[],[]},20000}.

%%--------------------------------------------------------------------
%% @private
%% @doc
%% Handling call messages
%%
%% @spec handle_call(Request, From, State) ->
%%                                   {reply, Reply, State} |
%%                                   {reply, Reply, State, Timeout} |
%%                                   {noreply, State} |
%%                                   {noreply, State, Timeout} |
%%                                   {stop, Reason, Reply, State} |
%%                                   {stop, Reason, State}
%% @end
%%--------------------------------------------------------------------
handle_call({get_data},_From,{Tracker,Data,Info}) ->
    Reply = Data,
    {reply, Reply,{Tracker,Data,Info}};

%%--------------------------------------------------------------------
%% @private
%% @doc
%% Handling cast messages
%%
%% @spec handle_cast(Msg, State) -> {noreply, State} |
%%                                  {noreply, State, Timeout} |
%%                                  {stop, Reason, State}
%% @end
%%--------------------------------------------------------------------
handle_call({set_tracker,NewTracker,Info_hash,Peer_id,Port,Uploaded,Downloaded,Left},_From,_State) ->
    %% for any reason if decided to switch to another tracker
    %% it will return data from new tracker
    NewData=fetch_data(NewTracker,{Info_hash,Peer_id,Port,Uploaded,Downloaded,Left}),
    {reply,NewData,{NewTracker,NewData,{Info_hash,Peer_id,Port,Uploaded,Downloaded,Left}}}.
handle_cast({req,stop},State) ->
    {stop,normal,State}.
%%--------------------------------------------------------------------
%% @private
%% @doc
%% Handling all non call/cast messages
%%
%% @spec handle_info(Info, State) -> {noreply, State} |
%%                                   {noreply, State, Timeout} |
%%                                   {stop, Reason, State}
%% @end
%%--------------------------------------------------------------------
handle_info(timeout,{Tracker,_Data,Info}) ->
    NewData=fetch_data(Tracker,Info),
    {noreply,{Tracker,NewData,Info}}.

%%--------------------------------------------------------------------
%% @private
%% @doc
%% This function is called by a gen_server when it is about to
%% terminate. It should be the opposite of Module:init/1 and do any
%% necessary cleaning up. When it returns, the gen_server terminates
%% with Reason. The return value is ignored.
%%
%% @spec terminate(Reason, State) -> void()
%% @end
%%--------------------------------------------------------------------
terminate(_Reason, _State) ->
    ok.


%%not used
code_change(_OldVsn, State, _Extra) ->
    {ok, State}.

%%%===================================================================






%%% Internal functions
%%%===================================================================

%% get tracker address and fetch data
fetch_data(undefined,_Info)->
	[];
%% get data from Tracker and parse it
	%% and put the peer information in a list to return
fetch_data(Tracker,{Info_hash,Peer_id,Port,Uploaded,Downloaded,Left})->
    ResponseTracker = ser_req:req(Tracker,[{"info_hash",Info_hash},
					   {"peer_id",Peer_id},
					   {"port",Port},
					   {"uploaded",Uploaded},
					   {"downloaded",Downloaded},
					   {"left",Left}]),
    case catch ResponseTracker of
	{error,_}->
	    error_in_tracker_response;
	{ok,{_A,_B,LRespond}} ->
	    case list_to_binary(LRespond) of
		<<>> -> not_found;
	    <<P,N/binary>> ->
		    case P of
			$d ->
			    {R,_Rest} = decenc:dec(N),
			    case R of 
				<<"complete">> ->
				    Respond = list_to_binary(LRespond),
				    Decoded = decenc:decode(Respond),
				    case Decoded of
					{ok,Parsed_data}->
					    Peers = fetch(binary:list_to_bin("peers"),
							  dict:to_list(Parsed_data)),
					    case Peers of
						not_found->
						    [];
						_Else->
						    parse_peers(Peers)
				    end;   %% peers
					_Else->
					    []
				    end;    %% decoded
				_->
				    error_in_tracker_response_2
			    end;     %% N
			_ ->
			    response_failed
		    end  %% respon
	    end
end.
%% will fetch specific data value by key from result of parser
fetch(_Key,[])->
	not_found;
fetch(Key,[{Key,Val}|_T])->
	Val;
fetch(Key,[{_H,[H1|T1]}|T])->
	case fetch(Key,[H1|T1]) of
		not_found->
			fetch(Key,T);
		Value->
			Value
	end;
fetch(Key,[_H|T])->
	fetch(Key,T).

%% return list of peers depends on Peers type (binary/list)
parse_peers(Peers)->
	Bin=is_binary(Peers),
	case Bin of
		true->
			parse_bin_peer(binary_to_list(Peers));
		false->
			parse_list_peer(Peers)
	end.

%% parse binary data to achieve peers information
parse_bin_peer([])->
	[];
parse_bin_peer([IP3,IP2,IP1,IP0,Port1,Port0|T])->
	<<_IP:32>> = <<IP3:8,IP2:8,IP1:8,IP0:8>>,
	<<Port:16>> = <<Port1:8,Port0:8>>,
	[{{IP3,IP2,IP1,IP0},Port}|parse_bin_peer(T)].

%% parse non-binary data to achieve peers information
parse_list_peer(_Peers)->
	[].

%% Convert binary hash to formated hex ready for Get request
bin_to_hex_formated(Bin)->
	Hex=list_to_hex(binary:bin_to_list(Bin)),
	add_perc_sign(Hex).

list_to_hex(L) ->
	lists:map(fun(X) -> int_to_hex(X) end, L).

int_to_hex(N) when N < 256 ->
	[hex(N div 16), hex(N rem 16)].

hex(N) when N < 10 ->
	$0+N;
hex(N) when N >= 10, N < 16 ->
	$A + (N-10).

add_perc_sign([])->
	[];
add_perc_sign([H|T])->
	"%"++H++add_perc_sign(T).

