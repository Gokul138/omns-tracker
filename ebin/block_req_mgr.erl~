%%%-------------------------------------------------------------------
%%% @author  <Yohanes@YOHANES-PC>
%%% @copyright (C) 2011, 
%%% @doc
%%%
%%% @end
%%% Created : 10 Dec 2011 by  <Yohanes@YOHANES-PC>
%%%-------------------------------------------------------------------
-module(block_req_mgr).

%% API
-export([start/0,req_starter/0,store_block/3]).
-define(BLOCKSIZE,16384).
-define(TIMEOUT,40000).
-include("../include/peer_records.hrl").
-include("../include/block_records.hrl").

start()->
    ets:new(blockTbl,[set,named_table,public,{keypos,1}]),
    io:format("block table started.. ~n").
store_block(Index,Begin,Block)->
    Blc_tuple = ets:lookup(blockTbl,Index),
    case Blc_tuple of
	[]-> 
	    ets:insert(blockTbl,{Index,Block_1 = {0,undefined,undefined},
				 Block_2 = {0,undefined,undefined},
				 Block_3 = {0,undefined,undefined},
				 Block_4 = {0,undefined,undefined}});
	_Else ->
	    [{Index,Block_1,Block_2,Block_3,Block_4}] = Blc_tuple
    end,
    case Begin of 
	0->  
	    ets:insert(blockTbl,{Index,{1,Begin,Block},
				 Block_2,Block_3,Block_4});
	?BLOCKSIZE ->
	    ets:insert(blockTbl,{Index,Block_1,{1,Begin,Block},
				 Block_3,Block_4});
	?BLOCKSIZE*2 -> 
	    ets:insert(blockTbl,{Index,Block_1,Block_2,{1,Begin,Block},
				 Block_4});
	?BLOCKSIZE*3 ->
	    ets:insert(blockTbl,{Index,Block_1,Block_2,Block_3,
				 {1,Begin,Block}})
    end.
req_starter()->
    TopRare = rare_first:rarest_first(5),
    %TopRare = rare_first:lookup(8294),
    master(TopRare).
master(TopRare)-> % spawns a process for each index request
    sma!{piece_length,self()},% gets z piece length
    receive
	Pc_len -> ok
    end,
    %Index = 8294,
    %[spawn(fun()-> slave(Index,List,0,Pc_len) end)|| {_,Index,List} <- TopRare].
    [spawn(fun()-> slave(Index,List,0,Pc_len,List) end)|| {_,Index,List} <- TopRare].
   % slave(Index,TopRare,0,Pc_len,TopRare).

%base case when enough block request is made while having still more peer 
slave(Index,_IpList,TotDwl,Pc_len,Back_up_IpList) when TotDwl== Pc_len ->
    io:format("waiting for blocks... of ~w~n",[Index]),
    receive
    after ?TIMEOUT ->
	    ok % blocks are assumed to be received in max of 1 min
    end,
    Piece_stat = check_receive(Index), 
    case Piece_stat of 
	[1,1,1,1]-> % all blocks are downloaded
	    case piece_check(Index) of
		{ok,Piece}-> 
		    %write_piece(Pc_len*Index,Piece),
		    write_piece(0,Piece),
		    io:format("~p dawnload successful ~n",[Index]);
		{error,Reason}->
		     io:format("~p dawnload unsuccessful due to ~p~n",
			       [Index,Reason])% log z index
	     end;
	 [_H|_T] -> %some blocks are missing
	    case analyze_missing(Index,Piece_stat,Pc_len,Back_up_IpList)of
		unavailable -> ok;% log z index
		request_accomplished ->
		    case piece_check(Index) of
			  {ok,Piece}-> 
			    %write_piece(Pc_len*Index,Piece),
			    write_piece(0,Piece),
			    io:format("~p dawnload successful ~n",
				      [Index]);
			  {error,Reason}->
			    io:format("~p dawnload unsuccessful due to ~p~n",
				      [Index,Reason])% log z index
		    end
	    end;
	[] -> % no blocks are downloaded
	    case analyze_missing(Index,[0,0,0,0],Pc_len,Back_up_IpList)of
		 unavailable -> ok;% log z index
		 request_accomplished ->
		     case piece_check(Index) of
			{ok,Piece}-> 
			   %write_piece(Pc_len*Index,Piece),
			     write_piece(0,Piece),
			     io:format("~p dawnload successful ~n",
				      [Index]);
			{error,Reason}->
			    io:format("~p dawnload unsuccessful due to ~p~n",
				      [Index,Reason])% log z index
		    end
	     end
    end;
	
%base case when no more peer. enough blocks might be received		    
slave(Index,[],_TotDwl,Pc_len,Back_up_IpList)-> 
    io:format("waiting for blocks... of ~w~n",[Index]),
    receive
    after ?TIMEOUT ->
	    ok % blocks are assumed to be received in max of 1 min
    end,
    Piece_stat = check_receive(Index), 
    case Piece_stat of 
	[1,1,1,1]-> % all blocks are downloaded
	    case piece_check(Index) of
		{ok,Piece}-> 
		    %write_piece(Pc_len*Index,Piece),
		    write_piece(0,Piece),
		    io:format("~p dawnload successful ~n",[Index]);
		{error,Reason}->
		    io:format("~p dawnload unsuccessful due to ~p~n",
			      [Index,Reason])
	    end;
	[_H|_T] -> % some blocks are missing
	    case  analyze_missing(Index,Piece_stat,Pc_len,Back_up_IpList)of
		unavailable -> ok;% log z index
		request_accomplished ->
		    case piece_check(Index) of
			{ok,Piece}-> %write_piece(Pc_len*Index,Piece),
			    write_piece(0,Piece),
			    io:format("~p dawnload successful ~n",
				      [Index]);
			{error,Reason}->
			    io:format("~p dawnload unsuccessful due to ~p~n",
				      [Index,Reason])% log z index
		    end
	    end;	 
	 [] -> % no blocks are downloaded
	    case analyze_missing(Index,[0,0,0,0],Pc_len,Back_up_IpList)of
		unavailable -> ok;% log z index
		request_accomplished ->
		    case piece_check(Index) of
			{ok,Piece}-> 
			   %write_piece(Pc_len*Index,Piece),
			    write_piece(0,Piece),
			    io:format("~p dawnload successful ~n",
				      [Index]);
			{error,Reason}->
			    io:format("~p dawnload unsuccessful due to ~p~n",
				      [Index,Reason])% log z index
		    end
	    end
    end;
% sends request for each peer for a particular Index
slave(Index,[Ip|IpList],Position,Pc_len,Back_up_IpList)-> 
    case lists:flatten(ets:match(peersTbl,{'_','$1',{Ip,'_'},'_','_','$2'})) of
	[_,disconnected]->
	    slave(Index,IpList,Position,Pc_len,Back_up_IpList);
	[_,choked]->
	    slave(Index,IpList,Position,Pc_len,Back_up_IpList);
	[Pid,unchoked]->
	    %BytePos = Position*Piece_len,
	    case  Position + ?BLOCKSIZE =< Pc_len of
		% Length is the length in the request
		true -> Length = ?BLOCKSIZE;
		false ->  Length = Pc_len - Position
	    end,
	    catch gen_server:cast(Pid,{request,Index,Position,Length}),
	    slave(Index,IpList,Position + Length,Pc_len,Back_up_IpList);
	  %%   case gen_server:cast(Pid,{request,Index,Position,Length}) of
%% 		{ok,sent}->
%% 		    slave(Index,IpList,Position + Length,Pc_len,Back_up_IpList);
%% 		{error,_}->
%% 		    slave(Index,IpList,Position,Pc_len,Back_up_IpList)
%%             end;
	[_,_]->
	    slave(Index,IpList,Position,Pc_len,Back_up_IpList);
%% 	[_,choked]->
%% 	    slave(Index,IpList,Position,Pc_len,Back_up_IpList);
	_Else ->
             io:format("table error~n")
    end.
analyze_missing(Index,Piece_stat,Pc_len,Back_up_IpList)->
    case Piece_stat of
	[0,0,0,0] -> 
	    case special_slave(Index,Back_up_IpList,0,?BLOCKSIZE) of 
		{ok,requested}-> 
		    analyze_missing(Index,[1,0,0,0],Pc_len,Back_up_IpList);
		{error,Reason}-> Reason
	     end;
	[1,0,0,0] ->
	    case special_slave(Index,Back_up_IpList,?BLOCKSIZE,?BLOCKSIZE) of
		{ok,requested}-> 
		    analyze_missing(Index,[1,1,0,0],Pc_len,Back_up_IpList);
		{error,Reason}-> Reason
	     end;
	[1,1,0,0] -> 
	    case special_slave(Index,Back_up_IpList,2*?BLOCKSIZE,?BLOCKSIZE) of
		{ok,requested}-> 
		    analyze_missing(Index,[1,1,1,0],Pc_len,Back_up_IpList);
		{error,Reason}-> Reason
	     end;
	[1,0,1,0] -> 
	    case special_slave(Index,Back_up_IpList,?BLOCKSIZE,?BLOCKSIZE) of
		{ok,requested}-> 
		    analyze_missing(Index,[1,1,1,0],Pc_len,Back_up_IpList);
		{error,Reason}-> Reason
	     end;
	[0,1,1,0] -> 
	    case special_slave(Index,Back_up_IpList,0,?BLOCKSIZE) of
		{ok,requested}-> 
		    analyze_missing(Index,[1,1,1,0],Pc_len,Back_up_IpList);
		{error,Reason}-> Reason
	     end;
	[0,0,1,0] -> 
	    case special_slave(Index,Back_up_IpList,0,?BLOCKSIZE) of
		{ok,requested}-> 
		    analyze_missing(Index,[1,0,1,0],Pc_len,Back_up_IpList);
		{error,Reason}-> Reason
	     end;
	[0,1,0,0] -> 
	    case special_slave(Index,Back_up_IpList,0,?BLOCKSIZE) of
		{ok,requested}-> 
		    analyze_missing(Index,[1,1,0,0],Pc_len,Back_up_IpList);
		{error,Reason}-> Reason
	     end;
	[1,1,1,0]->
	    case special_slave(Index,Back_up_IpList,?BLOCKSIZE*3,?BLOCKSIZE) of
		{ok,requested}-> 
		    analyze_missing(Index,[1,1,1,1],Pc_len,Back_up_IpList);
		{error,Reason}-> Reason
	     end;
	[0,0,0,1]-> 
	    case special_slave(Index,Back_up_IpList,0,?BLOCKSIZE) of
		{ok,requested}-> 
		    analyze_missing(Index,[1,0,0,1],Pc_len,Back_up_IpList);
		{error,Reason}-> Reason
	     end;
	[1,0,0,1]-> 
	    case special_slave(Index,Back_up_IpList,?BLOCKSIZE,?BLOCKSIZE) of
		{ok,requested}-> 
		    analyze_missing(Index,[1,1,0,1],Pc_len,Back_up_IpList);
		{error,Reason}-> Reason
	     end;
	[0,1,0,1]-> 
	    case special_slave(Index,Back_up_IpList,0,?BLOCKSIZE) of
		{ok,requested}-> 
		    analyze_missing(Index,[1,1,0,1],Pc_len,Back_up_IpList);
		{error,Reason}-> Reason
	     end;
	[1,1,0,1]-> 
	    case special_slave(Index,Back_up_IpList,?BLOCKSIZE*2,?BLOCKSIZE) of
		{ok,requested}-> 
		    analyze_missing(Index,[1,1,1,1],Pc_len,Back_up_IpList);
		{error,Reason}-> Reason
	     end;
	[0,0,1,1]-> 
	    case special_slave(Index,Back_up_IpList,0,?BLOCKSIZE) of
		{ok,requested}-> 
		    analyze_missing(Index,[1,0,1,1],Pc_len,Back_up_IpList);
		{error,Reason}-> Reason
	     end;
	[1,0,1,1]-> 
	    case special_slave(Index,Back_up_IpList,?BLOCKSIZE,?BLOCKSIZE) of
		{ok,requested}-> 
		    analyze_missing(Index,[1,1,1,1],Pc_len,Back_up_IpList);
		{error,Reason}-> Reason
	     end;
	[0,1,1,1]-> 
	    case special_slave(Index,Back_up_IpList,0,?BLOCKSIZE) of
		{ok,requested}-> 
		    analyze_missing(Index,[1,1,1,1],Pc_len,Back_up_IpList);
		{error,Reason}-> Reason
	    end;
	[1,1,1,1] -> request_accomplished
    end.
special_slave(Index,[Ip|IpList],Position,Length)-> 
    case lists:flatten(ets:match(peersTbl,{'_','$1',{Ip,'_'},'_','_','$2'})) of
	[_,disconnected]->
	    special_slave(Index,IpList,Position,Length);
	[_,choked]->
	    special_slave(Index,IpList,Position,Length);
	[Pid,unchoked]->
	    catch gen_server:cast(Pid,{request,Index,Position,Length}),
	    receive
	    after ?TIMEOUT ->
		    ok % blocks are assumed to be received in max of 1 min
	    end,
	    {ok,requested};
	_Else ->
             io:format("table error~n")
    end;	
special_slave(_Index,[],_Position,_Length) -> 
    {error,unavailable}.
check_receive(Index)->
    lists:flatten(ets:match(blockTbl,{Index,{'$1','_','_'},
				      {'$2','_','_'},{'$3','_','_'},
				      {'$4','_','_'}})).
	     
piece_check(Index)->
    Piece_list = lists:flatten(ets:match(blockTbl,{Index,{1,'_','$1'},
				      {1,'_','$2'},{1,'_','$3'},{1,'_','$4'}})),
    Piece = list_to_binary(Piece_list),
    Piece_Hash = crypto:sha(Piece),
    sma!{sha,Index + 1,self()},%%gets the SHA for the Index from Torrent
    receive
	{ok,Torrent_hash}-> ok
    end,
    case list_to_binary(Torrent_hash) == Piece_Hash of
	true ->
	    {ok,Piece};
	false ->
	    {error,unmatched_piece}
    end.
write_piece(BytePos,Piece)->
   %%  sma!{file_name,self()},
%%     receive
%% 	{file_name,Filename}-> ok
%%     end,
    %BytePos = Index*?BLOCKSIZE + Begin,
    %BytePos = Begin,
    %file_write!{write,Filename,BytePos,Block},
    file_write!{write,"Sample.avi",BytePos,Piece}.
