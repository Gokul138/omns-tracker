%%%-------------------------------------------------------------------
%%% @author  <vincent@VINCENT-THINK>
%%% @copyright (C) 2011, 
%%% @doc This module is the algorithm for piece downloading strategy,
%%%      basically, it is rarest first, it selects the rarest appearing 
%%%      pieces from those remote peers and download them first,  
%%%      because they would disappear in a high chance.

%%%      Input=IPs och Bitfields
%%%      Output= A list of selecting pieces
%%%-------------------------------------------------------------------

-module(rare_first).
-export([start/0,handle_bitfield/2,rarest_first/1]).

%%%-------------------------------------------------------------------
%%% @doc API functions for starting the module.
%%%-------------------------------------------------------------------


start()->
    ets:new(myTable,[bag,named_table]),
    io:format("Started ~n").
 %  handle_bitfield(Packet,Ip).   

%%%-------------------------------------------
%%% @doc this function  gets info of pieces and responding IPs from peer server,
%%%      and mingle every pieces in a bitfieldpool,
%%%      then do the piece downloading strategy rarest_first. 
%%%------------------------------------------

handle_bitfield(Packet,Ip)->
  %Bitfieldpool= binary_to_list(Packet,6,byte_size(Packet)),
    loop(Packet,Ip,0).
   % rarest_first().

%%%-------------------------------------------------------------------
%%% @doc  loop function is a way to get every bitfields from corresponding peers%%%       and it uses add function to write them into an ETS table.       
%%%-------------------------------------------------------------------


%% loop(Packet,Ip)->  
%%    case  lists:split(4,Packet) of
%%     {Piece,Other}->
%% 	 add(Piece,Ip),
%%           loop(Other,Ip);	  
%%        {Piece,[]}->
%%            io:format("no more pieces")
%%    end.
loop([Piece|Packet],Ip,Position)->
  case Piece of
      1 -> add(Position,Ip),
	   loop(Packet,Ip,Position+1);
      0 -> loop(Packet,Ip,Position+1)
  end;
loop([],_,_) -> 
    io:format("no more pieces~n").
    


add(Position,Ip)->
    ets:insert(myTable,{Position,Ip}).

%%%-------------------------------------------------------------------
%%% @doc check function is used to get the  number of each pieces.
%%%-------------------------------------------------------------------
check(List,'$end_of_table')->
    Position=ets:first(myTable),
    IpList = lists:flatten(ets:match(myTable,{Position,'$1'})),
    ets:delete(myTable,Position),
    [{length(IpList),Position,IpList}|List];
check(List,_)->
   Position=ets:first(myTable),
   %IpList = lists:flatten(ets:match(myTable,{Position,'$1'})),
   %% case  Position  of
%%     '$end_of_table'->
%%       List;
%%     _Other->
	  % MatchSpec=[{{Position,'_'},[],['$$']}],
    IpList = lists:flatten(ets:match(myTable,{Position,'$1'})),
    ets:delete(myTable,Position),
    check([{length(IpList),Position,IpList}|List],ets:next(myTable,ets:first(myTable))).
 % end.

%%%-------------------------------------------------------------------
%%% @doc the function is the strategy for selecting pieces,
%%%      it ranks the pieces due to their quantities,
%%%      and then select bunch of the rarest some.
%%%      (How many pieces selected depends on the N variable below)  
%%%-------------------------------------------------------------------
rarest_first(IndexOfRarest)->
 % N=0.25,
  RankList= lists:keysort(1,check([],ets:next(myTable,ets:first(myTable)))),
  %IndexOfRarest=lists:length(RankList)*N, %%<- this variable will be controlled 
                                 %%   by the users to change the maximum 
                                  %%   of the pieces downloaded at the same time.
   % {FinalList,_}=lists:sublist(IndexOfRarest, RankList),
    FinalList=lists:sublist(RankList,IndexOfRarest),
    FinalList.
  
  
    
   

