%%%-------------------------------------------------------------------
%%% @author  <Yohanes@YOHANES-PC>
%%% @copyright (C) 2011, 
%%% @doc This module is responsible for undertaking the block requests for
%%% a piece. it uses blockTbl for keeping track of blocks which are already
%%% received. a significant ammount of the code is for error handling since
%%% blocks might be received too late or not received at all. But generally 
%%% the algorithm waits for a TIMEOUT seconds,by assuming blocks will be
%%% received in this duration  
%%% @end
%%% Created : 10 Dec 2011 by  <Yohanes@YOHANES-PC>
%%%-------------------------------------------------------------------
-module(block_req_mgr_funs).

%% API
-export([start/0,req_starter/0,store_block/3,dwnld_index/6,init/0]).
-define(BLOCKSIZE,16384).
-define(TIMEOUT,40000).
-define(NO_OF_PRO,7).
-define(CON_TIME,90000).
-include("../include/peer_records.hrl").

start()->
    register(blockser,spawn(block_req_mgr_funs,init,[])).
init()->
    ets:new(blockTbl,[set,named_table,public,{keypos,1}]),
    io:format("block table started.. ~n"),
    receive
    after ?CON_TIME ->  io:format("i got out")
    end,
    loop(undefined,undefined,[],undefined).
loop(_,_,Index_list,TtlPieces) when length(Index_list) == TtlPieces ->
    io:format("download finished ~n");
loop(Count,RareList,Index_list,TtlPieces)-> 
    receive 
	{store,Index,Begin,Block}->
	    Blc_tuple = ets:lookup(blockTbl,Index),
	    case Blc_tuple of
		[]-> 
		    ets:insert(blockTbl,{Index,Block_1 =
					     {0,undefined,undefined},
					 Block_2 = {0,undefined,undefined},
					 Block_3 = {0,undefined,undefined},
					 Block_4 = {0,undefined,undefined}});
		_Else ->
		    [{Index,Block_1,Block_2,Block_3,Block_4}] = Blc_tuple
	    end,
	    case Begin of 
		0->  
		    ets:insert(blockTbl,{Index,{1,Begin,Block},
					 Block_2,Block_3,Block_4});
		?BLOCKSIZE ->
		    ets:insert(blockTbl,{Index,Block_1,{1,Begin,Block},
					 Block_3,Block_4});
		?BLOCKSIZE*2 -> 
		    ets:insert(blockTbl,{Index,Block_1,Block_2,{1,Begin,Block},
					 Block_4});
		?BLOCKSIZE*3 ->
		    ets:insert(blockTbl,{Index,Block_1,Block_2,Block_3,
					 {1,Begin,Block}})
	    end,
	   loop(Count,RareList,Index_list,TtlPieces);
	{start} ->
	    sma!{piece_length,self()},% gets z piece length
	    receive
		Pc_len -> ok
	    end,
	    sma!{noofpieces,self()},
	    receive
		{ok,AllPieces}->ok
	    end,
	    sma!{filelength,self()},
	    receive
		{ok,{{ok,FileLen}}}->ok
	    end,
	    Last_Piece_index = AllPieces - 1,
	    Last_Piece_len = FileLen - ((AllPieces-1)*Pc_len),
	    IpList_last = rare_first:lookup(Last_Piece_index),
	    dwnld_last_index(Last_Piece_index,IpList_last,Last_Piece_len,0),
	    [{Last_Piece_index,B1,B2,B3,B4}]= ets:lookup(blockTbl,
							 Last_Piece_index),
	    Last_Piece = filter_binary([B1,B2,B3,B4],<<>>),
	    case Last_Piece_len == byte_size(Last_Piece) of
		true -> 
		    NewIndexList = [Last_Piece_index|Index_list],
		    write_piece(Pc_len*Last_Piece_index,Last_Piece),
		    io:format("last piece downloaded ~n");
		false ->
		    NewIndexList = Index_list,
		    io:format("last piece download unsuccessful ~n")
	    end,
	    %TopRare = rare_first:lookup(8294),
	    RareList_all = rare_first:rarest_first(),
	    case create_pro(RareList) of
		{ok,TopRare} -> ok;
		{error,_Reason} -> 
		    TopRare = [],
		    ok
	    end,
	    loop(?NO_OF_PRO,RareList_all -- TopRare,NewIndexList,AllPieces);
	{report,Index,Report}->
	    case Report of
		{ok,downloaded}->
		     NewIndexList = [Index|Index_list];
		{error,_} -> 
		    NewIndexList = Index_list
	    end,
	    case Count == 1 of 
		true ->
		    case create_pro(RareList) of
			{ok,TopRare} -> ok;
			{error,_Reason} -> 
			    TopRare = [],
			    ok
		    end,
		    io:format("Next round started ~n"),
						%  [{Count,?NO_OF_PRO},TopRare]),
		    loop((Count-1) + ?NO_OF_PRO,RareList -- TopRare,
			 NewIndexList,TtlPieces);
		false ->   
		    io:format("Count = ~p ~n",[Count]),
		    loop(Count - 1,RareList,NewIndexList,TtlPieces)
	    end
    after ?CON_TIME ->
	    peer_manager_sup:load_new(),
	    receive
	    after ?CON_TIME ->ok
	    end, 
	    RareList_left = rare_first:new_rarest_first(Index_list),
	    case create_pro(RareList) of
		{ok,TopRare} -> ok;
		{error,_Reason} -> 
		    TopRare = [],
		    ok
	    end,
	    loop(?NO_OF_PRO,RareList_left-- TopRare,Index_list,TtlPieces)
    end.
store_block(Index,Begin,Block)->
   blockser!{store,Index,Begin,Block}.
req_starter()->
  blockser!{start}.

%%%%%%%%%%%%% Last Piece Functions%%%%%%%%%%%%%%%%%%%%%%%%%%%%
dwnld_last_index(Index,IpList,Len,Position)->
    case Len =< ?BLOCKSIZE of
	true ->
	    special_slave(Index,IpList,Position,Len);
	false ->
	    special_slave(Index,IpList,Position,?BLOCKSIZE),
	    dwnld_last_index(Index,IpList,Len-?BLOCKSIZE,
			     Position + ?BLOCKSIZE)
     end.
filter_binary([{1,_,Block}|List],Acc)->
    filter_binary(List,<<Acc/binary,Block/binary>>);
filter_binary([{0,_,_}|List],Acc) ->
    filter_binary(List,Acc);
filter_binary([],Acc) ->
    Acc.
%%%%%%%%%%%%%%%%%%%%End of Last Piece Functions %%%%%%%%%%%%%%%%%%%%

create_pro(RareList)->
    sma!{piece_length,self()},% gets z piece length
    receive
	Pc_len ->
	    %TopRare = rare_first:lookup(8294),
	    %block_req_mgr:download_manager(RareList,Pc_len),
	    Pid = self(),
	    TopRare = lists:sublist(RareList,?NO_OF_PRO),
	    [spawn(fun()-> 
			   block_req_mgr_funs:dwnld_index(Pid,Index,List,0,Pc_len,
                           List) end)||{_,Index,List} <- TopRare],
	    Reply = {ok,TopRare}
    after 50 -> 
	    Reply = {error,sma_undefind}	    
    end,
    Reply.
    
%base case when enough block request is made while having still more peer 
dwnld_index(Par_Pid,Index,_IpList,TotDwl,Pc_len,Back_up_IpList)
  when TotDwl== Pc_len ->
    io:format("waiting for blocks... of ~w~n",[Index]),
    receive
    after ?TIMEOUT ->
	    ok % blocks are assumed to be received in max of 1 min
    end,
    Piece_stat = check_receive(Index), 
    case Piece_stat of 
	[1,1,1,1]-> % all blocks are downloaded
	    case piece_check(Index) of
		{ok,Piece}-> 
		    write_piece(Pc_len*Index,Piece),
		    %write_piece(0,Piece),
		    Par_Pid!{report,Index,{ok,downloaded}},
		    io:format("~p dawnload successful ~n",[Index]);
		{error,Reason}->
		    Par_Pid!{report,Index,{error,Reason}},
		    io:format("~p dawnload unsuccessful due to ~p~n",
			       [Index,Reason])% log z index
	     end;
	 [_H|_T] -> %some blocks are missing
	    case analyze_missing(Index,Piece_stat,Pc_len,Back_up_IpList)of
		unavailable -> ok;% log z index
		request_accomplished ->
		    case piece_check(Index) of
			  {ok,Piece}-> 
			    write_piece(Pc_len*Index,Piece),
			    %write_piece(0,Piece),
			    Par_Pid!{report,Index,{ok,downloaded}},
			    io:format("~p dawnload successful ~n",
				      [Index]);
			  {error,Reason}->
			    Par_Pid!{report,Index,{error,Reason}},
			    io:format("~p dawnload unsuccessful due to ~p~n",
				      [Index,Reason])% log z index
		    end
	    end;
	[] -> % no blocks are downloaded
	    case analyze_missing(Index,[0,0,0,0],Pc_len,Back_up_IpList)of
		 unavailable -> ok;% log z index
		 request_accomplished ->
		     case piece_check(Index) of
			{ok,Piece}-> 
			     write_piece(Pc_len*Index,Piece),
			     %write_piece(0,Piece),
			     Par_Pid!{report,Index,{ok,downloaded}},
			     io:format("~p dawnload successful ~n",
				      [Index]);
			{error,Reason}->
			     Par_Pid!{report,Index,{error,Reason}},
			     io:format("~p dawnload unsuccessful due to ~p~n",
				      [Index,Reason])% log z index
		    end
	     end
    end;
	
%base case when no more peer. enough blocks might be received		    
dwnld_index(Par_Pid,Index,[],_TotDwl,Pc_len,Back_up_IpList)-> 
    io:format("waiting for blocks... of ~w~n",[Index]),
    receive
    after ?TIMEOUT ->
	    ok % blocks are assumed to be received in max of 1 min
    end,
    Piece_stat = check_receive(Index), 
    case Piece_stat of 
	[1,1,1,1]-> % all blocks are downloaded
	    case piece_check(Index) of
		{ok,Piece}-> 
		    write_piece(Pc_len*Index,Piece),
		    %write_piece(0,Piece),
		    Par_Pid!{report,Index,{ok,downloaded}},
		    io:format("~p dawnload successful ~n",[Index]);
		{error,Reason}->
		    Par_Pid!{report,Index,{error,Reason}},
		    io:format("~p dawnload unsuccessful due to ~p~n",
			      [Index,Reason])
	    end;
	[_H|_T] -> % some blocks are missing
	    case  analyze_missing(Index,Piece_stat,Pc_len,Back_up_IpList)of
		unavailable -> ok;% log z index
		request_accomplished ->
		    case piece_check(Index) of
			{ok,Piece}-> 
			    write_piece(Pc_len*Index,Piece),
			    %write_piece(0,Piece),
			    Par_Pid!{report,Index,{ok,downloaded}},
			    io:format("~p dawnload successful ~n",
				      [Index]);
			{error,Reason}->
			    Par_Pid!{report,Index,{error,Reason}},
			    io:format("~p dawnload unsuccessful due to ~p~n",
				      [Index,Reason])% log z index
		    end
	    end;	 
	 [] -> % no blocks are downloaded
	    case analyze_missing(Index,[0,0,0,0],Pc_len,Back_up_IpList)of
		unavailable -> ok;% log z index
		request_accomplished ->
		    case piece_check(Index) of
			{ok,Piece}-> 
			    write_piece(Pc_len*Index,Piece),
			    %write_piece(0,Piece),
			    Par_Pid!{report,Index,{ok,downloaded}},
			    io:format("~p dawnload successful ~n",
				      [Index]);
			{error,Reason}->
			    Par_Pid!{report,Index,{error,Reason}},
			    io:format("~p dawnload unsuccessful due to ~p~n",
				      [Index,Reason])% log z index
		    end
	    end
    end;
% sends request for each peer for a particular Index
dwnld_index(Par_Pid,Index,[Ip|IpList],Position,Pc_len,Back_up_IpList)-> 
    case lists:flatten(ets:match(peersTbl,{'_','$1',{Ip,'_'},'_','_','$2'})) of
	[_,disconnected]->
	    dwnld_index(Par_Pid,Index,IpList,Position,Pc_len,Back_up_IpList);
	[_,choked]->
	    dwnld_index(Par_Pid,Index,IpList,Position,Pc_len,Back_up_IpList);
	[Pid,unchoked]->
	    %BytePos = Position*Piece_len,
	    case  Position + ?BLOCKSIZE =< Pc_len of
		% Length is the length in the request
		true -> Length = ?BLOCKSIZE;
		false ->  Length = Pc_len - Position
	    end,
	    catch gen_server:cast(Pid,{request,Index,Position,Length}),
	    dwnld_index(Par_Pid,Index,IpList,Position + Length,Pc_len,
			Back_up_IpList);
	  %%   case gen_server:cast(Pid,{request,Index,Position,Length}) of
%% 		{ok,sent}->
%% 		    slave(Index,IpList,Position + Length,Pc_len,Back_up_IpList);
%% 		{error,_}->
%% 		    slave(Index,IpList,Position,Pc_len,Back_up_IpList)
%%             end;
	[_,_]->
	    dwnld_index(Par_Pid,Index,IpList,Position,Pc_len,Back_up_IpList);
%% 	[_,choked]->
%% 	    slave(Index,IpList,Position,Pc_len,Back_up_IpList);
	_Else ->
             io:format("table error~n")
    end.
analyze_missing(Index,Piece_stat,Pc_len,Back_up_IpList)->
    case Piece_stat of
	[0,0,0,0] -> 
	    case special_slave(Index,Back_up_IpList,0,?BLOCKSIZE) of 
		{ok,requested}-> 
		    analyze_missing(Index,[1,0,0,0],Pc_len,Back_up_IpList);
		{error,Reason}-> Reason
	     end;
	[1,0,0,0] ->
	    case special_slave(Index,Back_up_IpList,?BLOCKSIZE,?BLOCKSIZE) of
		{ok,requested}-> 
		    analyze_missing(Index,[1,1,0,0],Pc_len,Back_up_IpList);
		{error,Reason}-> Reason
	     end;
	[1,1,0,0] -> 
	    case special_slave(Index,Back_up_IpList,2*?BLOCKSIZE,?BLOCKSIZE) of
		{ok,requested}-> 
		    analyze_missing(Index,[1,1,1,0],Pc_len,Back_up_IpList);
		{error,Reason}-> Reason
	     end;
	[1,0,1,0] -> 
	    case special_slave(Index,Back_up_IpList,?BLOCKSIZE,?BLOCKSIZE) of
		{ok,requested}-> 
		    analyze_missing(Index,[1,1,1,0],Pc_len,Back_up_IpList);
		{error,Reason}-> Reason
	     end;
	[0,1,1,0] -> 
	    case special_slave(Index,Back_up_IpList,0,?BLOCKSIZE) of
		{ok,requested}-> 
		    analyze_missing(Index,[1,1,1,0],Pc_len,Back_up_IpList);
		{error,Reason}-> Reason
	     end;
	[0,0,1,0] -> 
	    case special_slave(Index,Back_up_IpList,0,?BLOCKSIZE) of
		{ok,requested}-> 
		    analyze_missing(Index,[1,0,1,0],Pc_len,Back_up_IpList);
		{error,Reason}-> Reason
	     end;
	[0,1,0,0] -> 
	    case special_slave(Index,Back_up_IpList,0,?BLOCKSIZE) of
		{ok,requested}-> 
		    analyze_missing(Index,[1,1,0,0],Pc_len,Back_up_IpList);
		{error,Reason}-> Reason
	     end;
	[1,1,1,0]->
	    case special_slave(Index,Back_up_IpList,?BLOCKSIZE*3,?BLOCKSIZE) of
		{ok,requested}-> 
		    analyze_missing(Index,[1,1,1,1],Pc_len,Back_up_IpList);
		{error,Reason}-> Reason
	     end;
	[0,0,0,1]-> 
	    case special_slave(Index,Back_up_IpList,0,?BLOCKSIZE) of
		{ok,requested}-> 
		    analyze_missing(Index,[1,0,0,1],Pc_len,Back_up_IpList);
		{error,Reason}-> Reason
	     end;
	[1,0,0,1]-> 
	    case special_slave(Index,Back_up_IpList,?BLOCKSIZE,?BLOCKSIZE) of
		{ok,requested}-> 
		    analyze_missing(Index,[1,1,0,1],Pc_len,Back_up_IpList);
		{error,Reason}-> Reason
	     end;
	[0,1,0,1]-> 
	    case special_slave(Index,Back_up_IpList,0,?BLOCKSIZE) of
		{ok,requested}-> 
		    analyze_missing(Index,[1,1,0,1],Pc_len,Back_up_IpList);
		{error,Reason}-> Reason
	     end;
	[1,1,0,1]-> 
	    case special_slave(Index,Back_up_IpList,?BLOCKSIZE*2,?BLOCKSIZE) of
		{ok,requested}-> 
		    analyze_missing(Index,[1,1,1,1],Pc_len,Back_up_IpList);
		{error,Reason}-> Reason
	     end;
	[0,0,1,1]-> 
	    case special_slave(Index,Back_up_IpList,0,?BLOCKSIZE) of
		{ok,requested}-> 
		    analyze_missing(Index,[1,0,1,1],Pc_len,Back_up_IpList);
		{error,Reason}-> Reason
	     end;
	[1,0,1,1]-> 
	    case special_slave(Index,Back_up_IpList,?BLOCKSIZE,?BLOCKSIZE) of
		{ok,requested}-> 
		    analyze_missing(Index,[1,1,1,1],Pc_len,Back_up_IpList);
		{error,Reason}-> Reason
	     end;
	[0,1,1,1]-> 
	    case special_slave(Index,Back_up_IpList,0,?BLOCKSIZE) of
		{ok,requested}-> 
		    analyze_missing(Index,[1,1,1,1],Pc_len,Back_up_IpList);
		{error,Reason}-> Reason
	    end;
	[1,1,1,1] -> request_accomplished
    end.
special_slave(Index,[Ip|IpList],Position,Length)-> 
    case lists:flatten(ets:match(peersTbl,{'_','$1',{Ip,'_'},'_','_','$2'})) of
	[_,disconnected]->
	    special_slave(Index,IpList,Position,Length);
	[_,choked]->
	    special_slave(Index,IpList,Position,Length);
	[Pid,unchoked]->
	    catch gen_server:cast(Pid,{request,Index,Position,Length}),
	    receive
	    after ?TIMEOUT ->
		    ok % blocks are assumed to be received in max of 1 min
	    end,
	    {ok,requested};
	[_,_]->
	    special_slave(Index,IpList,Position,Length);
	_Else ->
	    io:format("table error~n")
    end;	
special_slave(_Index,[],_Position,_Length) -> 
    {error,unavailable}.
check_receive(Index)->
    lists:flatten(ets:match(blockTbl,{Index,{'$1','_','_'},
				      {'$2','_','_'},{'$3','_','_'},
				      {'$4','_','_'}})).
	     
piece_check(Index)->
    Piece_list = lists:flatten(ets:match(blockTbl,{Index,{1,'_','$1'},
				      {1,'_','$2'},{1,'_','$3'},{1,'_','$4'}})),
    Piece = list_to_binary(Piece_list),
    Piece_Hash = crypto:sha(Piece),
    sma!{sha,Index + 1,self()},%%gets the SHA for the Index from Torrent
    receive
	{ok,Torrent_hash}-> ok
    end,
    case list_to_binary(Torrent_hash) == Piece_Hash of
	true ->
	    {ok,Piece};
	false ->
	    {error,unmatched_piece}
    end.
write_piece(BytePos,Piece)->
    sma!{filename,self()},
    receive
 	{ok,Filename}-> ok
    end,
   %%  BytePos = Index*?BLOCKSIZE + Begin,
%%     BytePos = Begin,
    file_write!{write,Filename,BytePos,Piece}.
   % file_write!{write,"Sample.avi",BytePos,Piece}.
